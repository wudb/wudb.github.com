<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cocos2d-x | iTeaCoder]]></title>
  <link href="http://wudb.github.io/blog/categories/cocos2d-x/atom.xml" rel="self"/>
  <link href="http://wudb.github.io/"/>
  <updated>2013-09-03T21:11:04+08:00</updated>
  <id>http://wudb.github.io/</id>
  <author>
    <name><![CDATA[啸寒]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入cocos2d-x中的touch事件]]></title>
    <link href="http://wudb.github.io/blog/2013/08/27/shen-ru-cocos2d-xzhong-de-touchshi-jian/"/>
    <updated>2013-08-27T12:11:00+08:00</updated>
    <id>http://wudb.github.io/blog/2013/08/27/shen-ru-cocos2d-xzhong-de-touchshi-jian</id>
    <content type="html"><![CDATA[<p>在文章<a href="http://www.cnblogs.com/xiaohan-wu/p/3187994.html" title="cocos2d-x中处理touch事件">cocos2d-x中处理touch事件</a>中简单讨论过怎样处理touch事件, 那么今天来深入了解下cocos2d-x中是怎样分发touch事件的。</p>

<p>我们最先来看到CCTouchDispatcher这个类, 这个类在cocos2d-x中是管理和分发touch事件,  这个类继承于EGLTouchDelegate:</p>

<pre><code>class CC_DLL EGLTouchDelegate
{
public:
    virtual void touchesBegan(CCSet* touches, CCEvent* pEvent) = 0;
    virtual void touchesMoved(CCSet* touches, CCEvent* pEvent) = 0;
    virtual void touchesEnded(CCSet* touches, CCEvent* pEvent) = 0;
    virtual void touchesCancelled(CCSet* touches, CCEvent* pEvent) = 0;
    virtual ~EGLTouchDelegate() {}
};
</code></pre>

<p>那么这个类是触摸的开始, 当然这里指的只是cocos2d-x这个库的外层接口, 而不包括openGL的部分。</p>

<p>在CCTouchDispatcher类中有两个方法: addStandardDelegate 和 addTargetedDelegate, 相信大家都用过的, 对, 这就添加多点和单点触摸的方法, 这个类里面定义了两个数组来管理这些添加进来的delegate, 然后当touch事件传到这个类时, 也就是会调用这个类的touchesBegan等这系列方法。而这四个方法都只是调用了下面这个方法:</p>

<pre><code>void touches(CCSet *pTouches, CCEvent *pEvent, unsigned int uIndex);
</code></pre>

<p>而这个方法主要内容就是分发touch事件, 首先分发的是单点事件:</p>

<pre><code>//判断是否有单点的handler
if (uTargetedHandlersCount &gt; 0)
{
    CCTouch *pTouch;
    CCSetIterator setIter;
    for (setIter = pTouches-&gt;begin(); setIter != pTouches-&gt;end(); ++setIter)
    {
        pTouch = (CCTouch *)(*setIter);

        CCTargetedTouchHandler *pHandler = NULL;
        CCObject* pObj = NULL;
        //遍历所有单点的handler, 开始分发不同的事件
        CCARRAY_FOREACH(m_pTargetedHandlers, pObj)
        {
            pHandler = (CCTargetedTouchHandler *)(pObj);

            if (! pHandler)
            {
               break;
            }

            bool bClaimed = false;
            if (uIndex == CCTOUCHBEGAN) //touchBegan
            {
                //这里拿到的就是我们经常在ccTouchBegan里面是返回的true or false
                bClaimed = pHandler-&gt;getDelegate()-&gt;ccTouchBegan(pTouch, pEvent);

                if (bClaimed)//如果为true, 说明这个delegate要处理事情
                {
                    pHandler-&gt;getClaimedTouches()-&gt;addObject(pTouch);
                }
            } else
             if (pHandler-&gt;getClaimedTouches()-&gt;containsObject(pTouch))
            {
                // moved ended canceled
                bClaimed = true;

                switch (sHelper.m_type)//分发事件的类型
                {
                case CCTOUCHMOVED:
                    pHandler-&gt;getDelegate()-&gt;ccTouchMoved(pTouch, pEvent);
                    break;
                case CCTOUCHENDED:
                    pHandler-&gt;getDelegate()-&gt;ccTouchEnded(pTouch, pEvent);
                    pHandler-&gt;getClaimedTouches()-&gt;removeObject(pTouch);
                    break;
                case CCTOUCHCANCELLED:
                    pHandler-&gt;getDelegate()-&gt;ccTouchCancelled(pTouch, pEvent);
                    pHandler-&gt;getClaimedTouches()-&gt;removeObject(pTouch);
                    break;
                }
            }
                //如果你返回了true并且你的类swallow掉了touch事件, 那么下面的touch事件就不再继续了
            if (bClaimed &amp;&amp; pHandler-&gt;isSwallowsTouches())
            {
                if (bNeedsMutableSet)
                {
                    pMutableTouches-&gt;removeObject(pTouch);
                }

                break;
            }
        }
    }
}
</code></pre>

<p>这就是单点的事件了, 所以不论你把类的优先级怎么设置, 单点事件都是在多点事件之前处理的。而多点事件基本类似, 这里就不再赘述了。</p>

<p>然后我们再回到添加delegate的方法上, 来看看优先级的处理, addStandardDelegate 和 addTargetedDelegate都会调用下面这个添加方法:</p>

<pre><code>void CCTouchDispatcher::forceAddHandler(CCTouchHandler *pHandler, CCArray *pArray)
{
unsigned int u = 0;

CCObject* pObj = NULL;
CCARRAY_FOREACH(pArray, pObj)
 {
     CCTouchHandler *h = (CCTouchHandler *)pObj;
     if (h)
     {
         //查找比自己优先级数字大的并在它的位置插入
         if (h-&gt;getPriority() &lt; pHandler-&gt;getPriority())
         {
             ++u;
         }

         if (h-&gt;getDelegate() == pHandler-&gt;getDelegate())
         {
             CCAssert(0, "");
             return;
         }
     }
 }

pArray-&gt;insertObject(pHandler, u);
}
</code></pre>

<p>这个方法主要是按照delegate的优先级来添加delegate, 所以代码中就表明了优先级数字越小, 优先级就越高, 但是这只是针对同种类型的touch事件。</p>

<p>这个类的其他方法, 比如移除delegate等等就不在这里赘述了, 好了, 这篇就到这里了。</p>
]]></content>
  </entry>
  
</feed>
